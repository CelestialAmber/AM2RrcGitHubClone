<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ealpha = 0;
active = 0;
fadeout = 0;
fadein = 1;
rectoffset = 32;
prevsuit = global.currentsuit;
hidechangetip = 0;
hidetext = 0;
maptext = get_text("Subscreen", "Title_Map");
timetext = steps_to_time2(global.gametime);
if (global.monstersleft &lt; 10) {
    metrtext1 = "0" + string(global.monstersleft);
} else metrtext1 = string(global.monstersleft);
if (global.monstersarea &lt; 10) {
    metrtext2 = "0" + string(global.monstersarea);
} else metrtext2 = string(global.monstersarea);
tip1text = get_text("Subscreen", "Menu_Tip");
tip2text = get_text("Subscreen", "Marker_Tip");
tip3text = get_text("Subscreen", "MarkerPos_Tip");
tip4text = get_text("Subscreen", "DeleteMarker_Tip");
tip5text = get_text("Subscreen", "EditMarker_Tip");
etiptext1 = get_text("Subscreen", "SelectItem_Tip");
etiptext2 = get_text("Subscreen", "ToggleItem_Tip");
logtitle = get_text("Subscreen", "Title_Logs");
ltiptext1 = get_text("Subscreen", "SelectCategory_Tip");
ltiptext2 = get_text("Subscreen", "SelectLog_Tip");
ltiptext3 = get_text("Subscreen", "ExpandLog_Tip");
ltiptext4 = get_text("Subscreen", "ScrollText_Tip");
ltiptext5 = get_text("Subscreen", "Back_Tip");
opt_text1 = get_text("Subscreen", "Title_Options");
opt_text2 = "";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>active = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (fadein) {
    if (rectoffset &gt; 0) {
        rectoffset -= 2;
    } else fadein = 0;
}
if (active &amp;&amp; !fadein &amp;&amp; oControl.kStart &amp;&amp; oControl.kStartPushedSteps == 0) event_user(0);
if (fadeout) rectoffset += 2;
if (ealpha &lt; 1 &amp;&amp; fadeout == 0) ealpha += 0.05;
if (ealpha &gt; 0 &amp;&amp; fadeout) ealpha -= 0.05;
if (ealpha &gt;= 1 &amp;&amp; fadeout == 0) active = 1;
if (ealpha &lt;= 0 &amp;&amp; fadeout) {
    global.ingame = 1;
    global.transitiontype = 3;
    room_goto(global.currentroom);
    Unmute_Loops();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>fadeout = 1;
active = 0;
instance_create(0, 0, oMapScrBG3);
if (instance_exists(oOptionsSound) &gt; false) with (oOptionsSound) event_user(3);
if (global.ssmode == 3) {
    save_gameoptions();
    with (oPauseMenuOptions) active = 0;
    with (oOptionsMain) active = 0;
    with (oOptionsDisplay) active = 0;
    with (oOptionsSound) active = 0;
    with (oOptionsControl) active = 0;
    with (oOptionsKeyboard) active = 0;
    with (oOptionsJoypad) active = 0;
    with (oOptionsQuit) active = 0;
    with (oOptionsReload) active = 0;
}
if (global.ssmode == 2) with (oLogScreenControl) active = 0;
if (global.ssmode == 1) with (oSubscreenMenu) active = 0;
if (global.ssmode == 0) with (oMapCursor) active = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(c_black);
draw_set_alpha(1);
draw_rectangle(view_xview[0], view_yview[0], view_xview[0] + 330, view_yview[0] + 41 - rectoffset, false);
draw_rectangle(view_xview[0], view_yview[0] + 198 + rectoffset, view_xview[0] + 330, view_yview[0] + 250, false);
if (global.ssmode == 0) {
    draw_background_ext(bg_SubScrBottom, view_xview[0], view_yview[0] + 30 - rectoffset, 10, 1, 0, -1, ealpha);
    draw_background_ext(bg_MapBottom, view_xview[0], view_yview[0] + 198 + rectoffset, 1, 1, 0, -1, ealpha);
    draw_set_alpha(ealpha);
    draw_set_font(fontGUI2);
    draw_set_halign(fa_center);
    draw_set_color(c_black);
    draw_text(view_xview[0] + 161, view_yview[0] + 30 - rectoffset, maptext);
    draw_set_color(c_white);
    draw_text(view_xview[0] + 160, view_yview[0] + 29 - rectoffset, maptext);
    draw_set_halign(fa_left);
    if (hidetext == 0) {
        draw_set_color(c_black);
        draw_text(view_xview[0] + 18, view_yview[0] + 198 + rectoffset, timetext);
        draw_text(view_xview[0] + 260, view_yview[0] + 198 + rectoffset, metrtext1);
        draw_text(view_xview[0] + 304, view_yview[0] + 198 + rectoffset, metrtext2);
        draw_set_color(c_white);
        draw_text(view_xview[0] + 17, view_yview[0] + 197 + rectoffset, timetext);
        draw_text(view_xview[0] + 259, view_yview[0] + 197 + rectoffset, metrtext1);
        draw_text(view_xview[0] + 303, view_yview[0] + 197 + rectoffset, metrtext2);
        draw_set_font(fontMenuSmall2);
        if (oMapCursor.state == 0) draw_txt_1button(view_xview[0] + 2, view_yview[0] + 225 + rectoffset, tip2text, 1, "Menu1", ealpha);
        if (oMapCursor.state == 1) {
            draw_txt_1button(view_xview[0] + 2, view_yview[0] + 212 + rectoffset, tip3text, 1, "DPad", ealpha);
            draw_txt_1button(view_xview[0] + 2, view_yview[0] + 225 + rectoffset, tip4text, 1, "Menu2", ealpha);
        }
        if (oMapCursor.state == 2) draw_txt_1button(view_xview[0] + 2, view_yview[0] + 225 + rectoffset, tip5text, 1, "Menu1", ealpha);
    }
} // if (global.ssmode == 0)
if (global.ssmode == 1) {
    draw_background_ext(bg_SubScrTop, 0, 30 - rectoffset, 1, 1, 0, -1, ealpha);
    draw_background_ext(bg_SubScrBottom, 0, 198 + rectoffset, 10, 1, 0, -1, ealpha);
    draw_set_alpha(ealpha);
    draw_txt_1button(view_xview[0] + 160, view_yview[0] + 196 + rectoffset, oSubscreenMenu.dtext, 0, "Fire", ealpha);
    draw_set_font(fontGUI2);
    draw_set_color(c_black);
    draw_text(19, 30 - rectoffset, string(ceil(global.playerhealth)) + "/" + string(global.maxhealth));
    draw_text(129, 30 - rectoffset, string(global.missiles) + "/" + string(global.maxmissiles));
    draw_text(211, 30 - rectoffset, string(global.smissiles) + "/" + string(global.maxsmissiles));
    draw_text(275, 30 - rectoffset, string(global.pbombs) + "/" + string(global.maxpbombs));
    draw_set_color(c_white);
    draw_text(18, 29 - rectoffset, string(ceil(global.playerhealth)) + "/" + string(global.maxhealth));
    draw_text(128, 29 - rectoffset, string(global.missiles) + "/" + string(global.maxmissiles));
    draw_text(210, 29 - rectoffset, string(global.smissiles) + "/" + string(global.maxsmissiles));
    draw_text(274, 29 - rectoffset, string(global.pbombs) + "/" + string(global.maxpbombs));
    if (hidetext == 0) {
        draw_background(bg_SubScrTipArrow1, view_xview[0] + 2, view_yview[0] + 217 + rectoffset);
        draw_set_font(fontMenuSmall2);
        draw_set_color(c_white);
        draw_text(view_xview[0] + 25, view_yview[0] + 212 + rectoffset, etiptext1);
        draw_txt_1button(view_xview[0] + 2, view_yview[0] + 225 + rectoffset, etiptext2, 1, "Menu1", ealpha);
    }
}
if (global.ssmode == 2) {
    draw_background_ext(bg_SubScrBottom, view_xview[0], view_yview[0] + 30 - rectoffset, 10, 1, 0, -1, ealpha);
    draw_background_ext(bg_SubScrBottom, view_xview[0], view_yview[0] + 198 + rectoffset, 10, 1, 0, -1, ealpha);
    draw_set_alpha(ealpha);
    draw_set_font(fontGUI2);
    draw_set_halign(fa_center);
    draw_set_color(c_black);
    draw_text(view_xview[0] + 161, view_yview[0] + 30 - rectoffset, logtitle);
    draw_set_color(c_white);
    draw_text(view_xview[0] + 160, view_yview[0] + 29 - rectoffset, logtitle);
    draw_set_halign(fa_left);
    if (hidetext == 0) {
        draw_set_font(fontMenuSmall2);
        draw_set_color(c_white);
    }
}
if (global.ssmode == 3) {
    draw_background_ext(bg_SubScrBottom, view_xview[0], view_yview[0] + 30 - rectoffset, 10, 1, 0, -1, ealpha);
    draw_background_ext(bg_SubScrBottom, view_xview[0], view_yview[0] + 198 + rectoffset, 10, 1, 0, -1, ealpha);
    draw_set_alpha(ealpha);
    draw_set_font(fontGUI2);
    draw_set_halign(fa_center);
    draw_set_color(c_black);
    draw_text(view_xview[0] + 161, view_yview[0] + 30 - rectoffset, opt_text1);
    draw_set_color(c_white);
    draw_text(view_xview[0] + 160, view_yview[0] + 29 - rectoffset, opt_text1);
    draw_set_halign(fa_left);
    draw_set_alpha(ealpha);
    draw_set_font(fontMenuSmall2);
    draw_set_halign(fa_center);
    draw_set_color(c_black);
    draw_text(view_xview[0] + 161, view_yview[0] + 197 + rectoffset, global.tiptext);
    draw_set_color(c_white);
    draw_text(view_xview[0] + 160, view_yview[0] + 196 + rectoffset, global.tiptext);
    draw_set_halign(fa_left);
}
if (hidechangetip == 0 &amp;&amp; hidetext == 0 &amp;&amp; oSS_Control.canchange) {
    draw_set_font(fontMenuSmall2);
    draw_set_color(c_white);
    draw_txt_1button(view_xview[0] + 318, view_yview[0] + 225 + rectoffset, tip1text, 2, "Menu2", ealpha);
}
if (hidetext) {
    draw_background_ext(bg_SubScrBottom, view_xview[0], view_yview[0] + 30 - rectoffset, 10, 1, 0, -1, ealpha);
    draw_background_ext(bg_SubScrBottom, view_xview[0], view_yview[0] + 198 + rectoffset, 10, 1, 0, -1, ealpha);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
