<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sSMissile</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5000000</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>targetx = 48;
targety = 432;
targetroom = rm_a5h01;
screen_surface = -1;
global.targetroom = initroom;
black = 0;
global.classicmode = 0;
global.godmode = 0;
global.enablecontrol = 1;
global.floormaterial = 0;
global.soundamb = 0;
global.moverobj = 0;
global.roomtime = 0;
global.quake = 0;
global.saveslot = 0;
global.save_room = initroom;
global.waterlevel = 0;
global.watertype = 0;
global.wateroffset = 0;
global.monstersleft = 0;
global.gametime = 0;
global.etanks = 0;
global.itemstaken = 0;
global.difficulty = 0;
global.darkness = 0;
global.controltype = 0;
global.vibL = 0;
global.vibR = 0;
global.qbg = 0;
quitgame = 0;
reloadgame = 0;
c_id = 0;
global.gotolog = -1;
global.tiptext = "";
displaygui = 1;
guifont1 = font_add_sprite(512, 48, 0, 1);
guifont1a = font_add_sprite(513, 48, 0, 1);
global.guifont2 = font_add_sprite(514, 48, 0, 0);
showfps = 0;
global.creditsmenuopt = 0;
hudflash = 0;
hudflashfx = 0;
hpalarm = 0;
init = 1;
alarm[0] = 2;
alarm[2] = 1;
nofade = 0;
spr = 0;
sprx = 0;
spry = 0;
aspr1 = sHPickup;
asprx = 0;
aspry = 0;
aspr2 = sHPickup;
aspr2x = 0;
aspr2y = 0;
aspr2a = 0;
mirror = 0;
imgindex = 0;
sprblend = 0;
armmsl = 0;
m1 = "0";
m2 = "0";
m3 = "0";
m4 = "0";
m5 = "0";
m6 = "0";
m7 = "0";
m8 = "0";
m9 = "0";
m10 = "0";
m11 = "0";
m12 = "0";
m13 = "0";
m14 = "0";
m15 = "0";
dm1 = "0";
dm2 = "0";
dm3 = "0";
dm4 = "0";
dm5 = "0";
dm6 = "0";
dm7 = "0";
dm8 = "0";
dm9 = "0";
dm10 = "0";
dm11 = "0";
dm12 = "0";
dm13 = "0";
dm14 = "0";
dm15 = "0";
moffx = 0;
moffy = 0;
kLeft = 0;
kRight = 0;
kUp = 0;
kDown = 0;
kJump = 0;
kAim = 0;
kAim2 = 0;
kFire = 0;
kMissile = 0;
kLeftPressed = 0;
kRightPressed = 0;
kUpPressed = 0;
kDownPressed = 0;
kJumpPressed = 0;
kAimPressed = 0;
kAim2Pressed = 0;
kFirePressed = 0;
kMissilePressed = 0;
kLeftPushedSteps = 0;
kRightPushedSteps = 0;
kUpPushedSteps = 0;
kDownPushedSteps = 0;
kJumpPushedSteps = 0;
kAimPushedSteps = 0;
kAim2PushedSteps = 0;
kFirePushedSteps = 0;
kMissilePushedSteps = 0;
kLeftReleased = 0;
kRightReleased = 0;
kUpReleased = 0;
kDownReleased = 0;
kJumpReleased = 0;
kAimReleased = 0;
kAim2Released = 0;
kFireReleased = 0;
kMissileReleased = 0;
kSelect = 0;
kSelectPressed = 0;
kSelectPushedSteps = 0;
kSelectReleased = 0;
kStart = 0;
kStartPressed = 0;
kStartPushedSteps = 0;
kStartReleased = 0;
kWalk = 0;
kWalkPushedSteps = 0;
kWalkPressed = 0;
kWalkReleased = 0;
kMorph = 0;
kMorphPushedSteps = 0;
kMorphPressed = 0;
kMorphReleased = 0;
kMenu1 = 0;
kMenu1PushedSteps = 0;
kMenu1Pressed = 0;
kMenu1Released = 0;
kMenu2 = 0;
kMenu2PushedSteps = 0;
kMenu2Pressed = 0;
kMenu2Released = 0;
kExit = 0;
markfr = 0;
display_scale = 0;
displayx = 0;
displayy = 0;
gui_surface = 0;
global.opfullscreen = 0;
global.opscale = 0;
global.opwritelog = 0;
global.opapril = 0;
global.vscol1 = shader_get_uniform(shReplaceColor, "f_Colour1");
global.vscol2 = shader_get_uniform(shReplaceColor, "f_Colour2");
global.vscol3 = shader_get_uniform(shReplaceColor, "f_Colour3");
global.vscol4 = shader_get_uniform(shReplaceColor, "f_Colour4");
global.vscol5 = shader_get_uniform(shReplaceColor, "f_Colour5");
global.vscol6 = shader_get_uniform(shReplaceColor, "f_Colour6");
global.vscol7 = shader_get_uniform(shReplaceColor, "f_Colour7");
global.gscol1 = shader_get_uniform(shReplaceColor, "f_Replace1");
global.gscol2 = shader_get_uniform(shReplaceColor, "f_Replace2");
global.gscol3 = shader_get_uniform(shReplaceColor, "f_Replace3");
global.gscol4 = shader_get_uniform(shReplaceColor, "f_Replace4");
global.gscol5 = shader_get_uniform(shReplaceColor, "f_Replace5");
global.gscol6 = shader_get_uniform(shReplaceColor, "f_Replace6");
global.gscol7 = shader_get_uniform(shReplaceColor, "f_Replace7");
shades[0] = 0.203921568627451;
shades[1] = 0.219607843137255;
shades[2] = 1 / 85;
shades[3] = 0.25;
shades[4] = 0.384313725490196;
shades[5] = 0.407843137254902;
shades[6] = 0.149019607843137;
shades[7] = 0.5;
shades[8] = 0.56078431372549;
shades[9] = 0.596078431372549;
shades[10] = 0.286274509803922;
shades[11] = 0.75;
shades[12] = 0.737254901960784;
shades[13] = 0.780392156862745;
shades[14] = 0.419607843137255;
shades[15] = 1;
hndShades = shader_get_uniform(shGameBoy, "shades");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.opfullscreen = !global.opfullscreen;
set_fullscreen(global.opfullscreen);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.ingame) {
    if (hpalarm == 0) alarm[2] = 10;
    if (hpalarm == 1) {
        hudflash = 10;
        alarm[2] = 90;
    }
    if (hpalarm == 2) {
        hudflash = 12;
        alarm[2] = 60;
    }
    if (hpalarm == 3) {
        hudflash = 15;
        alarm[2] = 30;
    }
} else alarm[2] = 30;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (joystick_exists(global.opjoyid)) {
    global.joydetected = 1;
} else global.joydetected = 0;
init = 0;
if (os_type == os_android) instance_create(0, 0, oTouchControls);
if (1) {
    room_change(19, 0);
} else {
    load_character_vars();
    reset_map();
    init_map();
    global.save_room = initroom;
    set_start_location();
    global.ingame = 1;
    global.newgame = 0;
    global.targetx = 32;
    global.targety = 128;
    global.start_room = asset_get_index("rm_a7b10");
    get_loadout(10);
    mus_set_current(273);
    room_change(global.start_room, 3);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//
if (fadedone &gt;= 1 &amp;&amp; room != rm_transition &amp;&amp; room != rm_subscreen &amp;&amp; room != itemroom &amp;&amp; room != rm_death) {
    global.transitiontype = 0;
    event_user(4);
}
//
if (!init) {
    if (os_type != os_android) {
        check_keys();
    } else touch_keys();
    if (room != rm_transition) global_control();
    if (kExit &amp;&amp; global.opexitkeyenable) game_end();
    if (kStart &amp;&amp; kStartPushedSteps == 0) event_user(0);
}
//
if (global.ingame == 1) {
    if (malpha &gt; -1) malpha -= 0.02;
    if (malpha &lt;= 0) malpha = 1;
    markfr += 0.25;
    if (markfr &gt; 4) markfr = 0;
    global.roomtime += 1;
    //
    hpalarm = 0;
    if (global.maxhealth == 99) {
        if (global.playerhealth &lt; 50) hpalarm = 1;
        if (global.playerhealth &lt; 30) hpalarm = 2;
        if (global.playerhealth &lt; 10) hpalarm = 3;
    } else if (global.maxhealth &gt; 99) {
        if (global.playerhealth &lt; 100) hpalarm = 1;
        if (global.playerhealth &lt; 60) hpalarm = 2;
        if (global.playerhealth &lt; 20) hpalarm = 3;
    }
    //
    if (hudflash &gt; 0) {
        hudflash -= 1;
        if (hudflashfx &gt; 0) {
            hudflashfx -= 1;
        } else hudflashfx = 4;
    }
}
// view:
view_wport[0] = 320;
view_wview[0] = 320;
view_hport[0] = 240;
view_hview[0] = 240;
// display offset:
if (window_get_fullscreen()) {
    if (global.opscale == 0) {
        if (display_get_height() &lt; display_get_width()) {
            display_scale = display_get_height() / 240;
        } else display_scale = display_get_width() / 320;
    } else display_scale = global.opscale;
    displayx = display_get_width() / 2 - 320 * display_scale / 2;
    displayy = display_get_height() / 2 - 240 * display_scale / 2;
} else {
    if (window_get_height() &lt; window_get_width()) {
        display_scale = window_get_height() / 240;
    } else display_scale = window_get_width() / 320;
    displayx = window_get_width() / 2 - 320 * display_scale / 2;
    displayy = window_get_height() / 2 - 240 * display_scale / 2;
}
//
if (!surface_exists(gui_surface)) gui_surface = surface_create(320, 240);
if (surface_exists(gui_surface)) {
    surface_set_target(gui_surface);
    draw_clear_alpha(c_black, 0);
    if (global.ingame &amp;&amp; displaygui &amp;&amp; instance_exists(oCharacter)) draw_gui();
    surface_reset_target();
}
//
if (debug &gt; 0) {
    global.playerhealth = global.maxhealth;
    global.missiles = 99;
    global.smissiles = 99;
    global.pbombs = 99;
}
//
if (black &gt; 0) black -= 1;
// a workaround for Alt getting stuck on Alt+Tab:
if (os_is_paused()) keyboard_clear(vk_alt);
// on HTML5, keep the game in center of the tab:
if (os_is_browser) set_fullscreen(global.opfullscreen);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="14">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (surface_exists(screen_surface)) {
    surface_free(screen_surface);
}
if (os_is_native) {
    if (file_exists(working_directory + "/tempscr")) {
        file_delete(working_directory + "/tempscr");
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!surface_exists(screen_surface)) screen_surface = surface_create(512, 256);
surface_set_target(screen_surface);
draw_clear(c_black);
if (surface_exists(application_surface)) draw_surface(application_surface, 0, 0);
surface_reset_target();
if (os_is_native) {
    if (surface_exists(application_surface)) {
        surface_save(application_surface, working_directory + "/tempscr");
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>m1 = string(global.map[global.mapposx, global.mapposy]);
m2 = string(global.map[global.mapposx - 2, global.mapposy - 1]);
m3 = string(global.map[global.mapposx - 1, global.mapposy - 1]);
m4 = string(global.map[global.mapposx, global.mapposy - 1]);
m5 = string(global.map[global.mapposx + 1, global.mapposy - 1]);
m6 = string(global.map[global.mapposx + 2, global.mapposy - 1]);
m7 = string(global.map[global.mapposx - 2, global.mapposy]);
m8 = string(global.map[global.mapposx - 1, global.mapposy]);
m9 = string(global.map[global.mapposx + 1, global.mapposy]);
m10 = string(global.map[global.mapposx + 2, global.mapposy]);
m11 = string(global.map[global.mapposx - 2, global.mapposy + 1]);
m12 = string(global.map[global.mapposx - 1, global.mapposy + 1]);
m13 = string(global.map[global.mapposx, global.mapposy + 1]);
m14 = string(global.map[global.mapposx + 1, global.mapposy + 1]);
m15 = string(global.map[global.mapposx + 2, global.mapposy + 1]);
dm1 = global.dmap[global.mapposx, global.mapposy];
dm2 = global.dmap[global.mapposx - 2, global.mapposy - 1];
dm3 = global.dmap[global.mapposx - 1, global.mapposy - 1];
dm4 = global.dmap[global.mapposx, global.mapposy - 1];
dm5 = global.dmap[global.mapposx + 1, global.mapposy - 1];
dm6 = global.dmap[global.mapposx + 2, global.mapposy - 1];
dm7 = global.dmap[global.mapposx - 2, global.mapposy];
dm8 = global.dmap[global.mapposx - 1, global.mapposy];
dm9 = global.dmap[global.mapposx + 1, global.mapposy];
dm10 = global.dmap[global.mapposx + 2, global.mapposy];
dm11 = global.dmap[global.mapposx - 2, global.mapposy + 1];
dm12 = global.dmap[global.mapposx - 1, global.mapposy + 1];
dm13 = global.dmap[global.mapposx, global.mapposy + 1];
dm14 = global.dmap[global.mapposx + 1, global.mapposy + 1];
dm15 = global.dmap[global.mapposx + 2, global.mapposy + 1];
if (global.mapmarker) {
    moffx = global.mapmarkerx - global.mapposx;
    moffy = global.mapmarkery - global.mapposy;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Player death transition
with (oCharacter) {
    x -= view_xview[0];
    y -= view_yview[0];
    visible = false;
}
view_xview[0] = 0;
view_yview[0] = 0;
mus_current_fadeout();
sfx_stop_all();
sfx_play(sndPlayerDeath);
global.vibL = 0;
global.vibR = 0;
global.ingame = 0;
global.darkness = 0;
global.gotolog = -1;
global.transitiontype = 3;
event_user(3);
room_goto(rm_death);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.ingame == 1 &amp;&amp; global.enablecontrol == 1 &amp;&amp; room != rm_transition) {
    event_user(3);
    global.ingame = 0;
    global.targetx = oCharacter.x;
    global.targety = oCharacter.y;
    global.offsetx = 0;
    global.offsety = 0;
    room_persistent = true;
    if (instance_exists(oCharacter)) with (oCharacter) persistent = false;
    if (instance_exists(oCamera)) with (oCamera) persistent = false;
    if (instance_exists(oNotification)) with (oNotification) persistent = false;
    if (instance_exists(oScanMonster)) with (oScanMonster) persistent = false;
    global.currentroom = room;
    global.ssmode = 0;
    room_change(16, 3);
    Mute_Loops();
    global.vibL = 0;
    global.vibR = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>writelog("UnLoading Room " + string(room));
global.roomtime = 0;
fadedone = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>writelog("Loading Room " + string(room));
if (room != rm_transition) {
    if (global.ingame == 1 &amp;&amp; instance_number(oCharacter) == 0) {
        player = instance_create(global.save_x, global.save_y, oCharacter);
        with (player) juststarted = 100;
        mus_intro_fanfare();
    }
    if (global.ingame == 1) {
        room_persistent = false;
        if (quitgame) {
            quitgame = 0;
            remove_persistent_objects();
            sfx_stop_all();
            global.ingame = 0;
            global.darkness = 0;
            if (reloadgame == 0) {
                room_goto(titleroom);
            } else {
                global.newgame = 0;
                room_goto(rm_loading);
            }
            exit;
        }
        ApplyLightPreset();
        Unmute_Loops();
        if (instance_exists(oCharacter)) with (oCharacter) persistent = true;
        if (instance_exists(oCamera)) with (oCamera) persistent = true;
        if (instance_exists(oNotification)) with (oNotification) persistent = true;
        if (instance_exists(oScanMonster)) with (oScanMonster) persistent = true;
    }
} // if (room != rm_transition)
malpha = 1;
fadedone = 0;
if (room == rm_transition) fadedone = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>debug = 0;
global.ingame = 0;
global.transitiontype = 0;
global.transitionx = 0;
global.transitiony = 0;
init_languages();
load_gameoptions();
writelog("Options Loaded");
init_stats();
if (file_exists("data.sav")) load_stats();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="77">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>application_surface_draw_enable(0);
if (surface_exists(application_surface)) draw_game_surface(displayx, displayy, display_scale);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.ingame) {
    if (surface_exists(gui_surface)) {
        if (global.ingame &amp;&amp; displaygui &amp;&amp; room != rm_transition &amp;&amp; instance_exists(oCharacter)) {
            var d = application_get_position();
            draw_surface_ext(gui_surface, displayx - d[0], displayy - d[1], display_scale, display_scale, 0, -1, 1);
        }
    }
}
if (black &gt; 0) {
    draw_set_alpha(1);
    draw_set_color(c_black);
    draw_rectangle(0, 0, display_get_width(), display_get_height(), false);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (fadedone &lt; 1 &amp;&amp; room != initroom) {
    if (global.transitiontype &lt; 2) {
        draw_set_alpha(1 - fadedone);
        draw_set_color(c_black);
        draw_rectangle(0, 0, room_width, room_height, false);
        if (instance_exists(oCharacter) &amp;&amp; global.transitiontype == true) draw_character(oCharacter.sprite_index, oCharacter.x, oCharacter.y, oCharacter.aspr1, oCharacter.asprx, oCharacter.aspry, oCharacter.aspr2, oCharacter.aspr2x, oCharacter.aspr2y, oCharacter.aspr2a, oCharacter.mirror, oCharacter.image_blend, 1 - fadedone, oCharacter.armmsl, oCharacter.image_index);
        fadedone += 0.1;
    }
}
draw_set_alpha(1);
if (showfps) {
    draw_set_font(fontMenuSmall);
    draw_set_color(c_white);
}
draw_set_font(fontMenuTiny);
draw_set_color(c_white);
draw_set_alpha(0.6);
draw_set_halign(fa_right);
if (0) draw_text(view_xview[0] + view_wview[0] - 2, view_yview[0] + 232, "1.1 T1");
if (0) draw_text(view_xview[0] + view_wview[0] - 2, view_yview[0] + 232, "WORK IN PROGRESS");
draw_set_alpha(1);
draw_set_halign(fa_left);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="123">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!directory_exists("snap")) directory_create(working_directory + "/" + "snap");
i = -1;
do {
    i += 1;
} until (!file_exists(working_directory + "/snap/snap 0" + string(i) + ".png") &amp;&amp; !file_exists(working_directory + "/snap/snap 00" + string(i) + ".png") &amp;&amp; !file_exists(working_directory + "/snap/snap 000" + string(i) + ".png"));
sname = "snap/snap " + string(i);
if (i &lt; 1000) sname = "snap/snap 0" + string(i);
if (i &lt; 100) sname = "snap/snap 00" + string(i);
if (i &lt; 10) sname = "snap/snap 000" + string(i);
screen_save(sname + ".png");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="122">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>showfps = !showfps;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="115">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (keyboard_check(vk_alt)) game_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.ingame == 1 &amp;&amp; global.enablecontrol == 1 &amp;&amp; room != rm_transition) {
    event_user(3);
    global.ingame = 0;
    global.targetx = oCharacter.x;
    global.targety = oCharacter.y;
    global.offsetx = 0;
    global.offsety = 0;
    global.camstartx = oCamera.x;
    global.camstarty = oCamera.y;
    with (oCamera) {
        targetx = x;
        targety = y;
    }
    room_persistent = true;
    oCharacter.persistent = false;
    oCamera.persistent = false;
    if (instance_exists(oNotification)) oNotification.persistent = false;
    global.currentroom = room;
    global.transitiontype = 2;
    global.ssmode = 3;
    room_goto(rm_subscreen);
    Mute_Loops();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (keyboard_check(vk_alt)) {
    alarm[4] = 1;
    black = 5;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>-1</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
